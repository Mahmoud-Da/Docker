勉強会：
dockerを利用する前に
Linux を知っておくべき理由:
Docker は基本的な Linux の概念に基づいて構築されているからです。
(Linux を学ぶことは、今時英語を学ぶことに似ています。
話したり、本を書いたりする必要はありませんが、自分が把握するために必要です)

Dockerとは：
一貫した方法で、アプリケーションを作成、実行、配布するためのプラットフォームです。

つまり、あるアプリケーションがある開発マシンで動作させたい場合、
他のマシンでも同じ形で実行できます。

たまに同じアプリケーションでも、(A)PCと(B)PC上で実行したい場合は、
(A)PCに通常に動作できたのに、(B)PCに動作できない場合があります。
理由：
1- アプリケーションのファイルを一致してない。
2- ソフトウェアバージョンの不一致。
3- 各PCの設定の違い

ここで docker が助けに来ます。
docker を利用することによって、アプリケーションに必要なものすべてをパッケージ化して、
複数のマシンで、正常に実行できます。

つまり、開発マシンで正常に動作した場合は、テストおよび本番マシンで必ず正常に作業します。

さらに、チームに新しいメンバーが入ってきたら、半日ほどがかかる開発環境のセットアップ
を避けることができます。つまり、依存関係をインストールして構成する必要はありません。
ただ、新メンバーがアプリケーションを立ち上げる(docker-compose up)際に、
docker自体が自動的指定されたアプリケーションの依存関係をダウンロードして、
コンテナと呼ばれる隔離環境で実行します。

dockerの特徴：
1- 複数のアプリケシーン（異なる依存関係でも）コンフリクトせずに実行できます。
ex: App1 node 9
ex: App2 node 14
同じマシンで問題なく実行可能です。

2-アプリケーシんを使い終わったら、対象アプリケーションと依頼関係を簡単に削除できます。
つまり、dockerなしで、様々なプロジェクトを取り込むことによって、自分の開発環境がダウンロード
された依頼関係やライブライによって、散らかってしまいます。
そしてしばらくすると、不要だと思ったツールの 1 つまたは複数を削除できるかどうか
わからなくなってしまいます。
なぜなら、過去に作成したアプリケーションやこれから作成するアプリケーションなどに
影響して、台無しにしてしまう可能性が高いからです。


コンテナと仮想マシン(VM)の違い：
簡単にいうと：
コンテナとは:
アプリケーションを実行（開始・停止・移動・削除）するための隔離された環境です。
(安全なアプリケーションのプラットフォームです)

仮想マシンとは：
コンビューター（物理マシン）と同じ機能をソフトウェアで実現したコンピューターです。


仮想マシンの特徴：
- 仮想マシン内でアプリケーションを分離して実行できます。
=> つまり、同じ物理コンビューターで複数の仮想マシン(VM)を実行でき、
各マシンで違い依頼関係でも問題なく実行可能です。

VMの問題：
- 始めるのはかなり遅い
=> コンピューターを起動するのと同じように、すべてのOSをロードする必要があります
-　リソースかなり消費してしまうのです。
各VMが実際のCPUやメモリなどからリソースを消費してしまいます。
=> 同じ物理マシンで、あまりにも多くのVMを実行することはできません。


一方で
コンテナでは：
- 複数のアプリを分離して実行できます。
- VMよりかなり軽いです。
- hostのOSのみを利用します。
- 起動するのはかなり早い（hostの環境上にすでにインストールされています）
- 必要なハードウェアのリソースが少ない
つまり、同時に100コンテナを実行可能です。


Dockerのアーキテクチャ（設計方法）:
サーバ型のアーキテクチャで、DockerクライアントがDockerコンテナの構築・実行・配布といった力仕事をするには、Dockerデーモンと通信します。
RESTfulAPIを経由して通信します
サーバーはdocker engine を呼ばれて、裏でDockerコンテナの構築と実行を担当します。


Docker デーモン:
ホストマシン上で動きます。ユーザは直接デーモンと通信せず、Docker クライアントを通して行います。

Docker クライアント:
ユーザがDockerとの通信に使います。ユーザからのコマンドを受け付けたら、その先にある Docker デーモンが通信を返します。

dockerの内部：
1-Docker image (イメージ)
Docker イメージとは、読み込み専用（read-only）のテンプレートです。
イメージはDockerコンテナの作成時に使います。Dockerは新しいイメージの構築や、既存イメージを更新します。あるいは、他の人が既に作成した Docker イメージをダウンロードすることも可能です。

2- docker registry (レジストリ)
Dockerレジストリはイメージを保管します。パブリックもしくはプライベートに保管するイメージの、アップロードやダウンロードが可能です。

3-Docker container (コンテナ)


コンテナとカーネル:
本格的なOSを持っていなくて、代わりに、すべてのコンテナホスト上で、ホストのオペレーティングシステムを共有します。
=> すべてのコンテナーがホストのカーネルを共有します。

カーネルとは：
OSのコアです。（車のエンジンと同じです。）すべてのアプリケーションとハードウェアのリソース（CPUやメモリなど）
の管理を担当します。
- 各OSが独自のカーネルを持っていて(各車が独自エンジンを持つようにと同じ)、
このカーネルには異なるAPIを持っています。

つまり、
LinuxOSでは：
Linux コンテナのみを実行できます

windowsでは：
windowsとLinuxコンテナを実行できます
(Windows 10 には、カスタムビルドのLinux カーネルが同梱されています。)
=> windows上ではlinuxアプリケーションを通常に実行可能です。

MAC OSでは：
Linux や Windows カーネルとは異なる独自のカーネルを持っていて、
このカーネルには、コンテナ化されたアプリケーションのネイティブサポートがありません。
=>　そのために、docker は MAC上でLinuxコンテナを実行するために軽量のLinux仮想マシンを使用します。

