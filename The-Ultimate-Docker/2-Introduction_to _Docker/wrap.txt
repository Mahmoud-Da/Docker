*** 1- Introduction ***

- our journey to master Docker begins here. In every section, we're going to discover
something new about Docker. In this section,
- we're going to talk about what Docker is and
why it's so popular. 

- Then we're going to talk about virtual machines and containers.

- Next, we're going to talk about the architecture of Docker so we understand how it works.

- Then we're going to install Docker and get our hands dirty.

- we're going to give we an overview of wer development workflow with Docker.

- And then we're going to see that in action using a really simple example. 

So by the end of this section, we will have an idea of what Docker is all about.



*** 2- What is Docker ***

- So what is docker and why is everyone using it these days? Well,
docker is a platform for building, running, and shipping applications in a consistent manner.

- so if our application works on our development machine, it can run and function the same way on other machines.

- If we have been developing software for a while, we've probably come across this situation where
our application works on our development machine, but doesn't somewhere else. Can we think of
three reasons why this happens? Well, this can happen if one or more files are not included as
part of our deployment. So our application is not completely deployed, it's missing something.
This can also happen if the target machine is running a different version of some software
that our application needs. Let's say our application needs node version 14, but the
target machine is running node version 9. This can also happen if the configuration settings,
like environment variables, are different across these machines.


- And this is where docker comes to the rescue. With docker, we can easily package up our
application with everything it needs and run it anywhere on any machine with docker. So if our
application needs a given version of node and mongodb, all of these will be included in our
application's package. Now we can take this package and run it on any machine that runs docker.
So if it works on our development machine, it's definitely going to work on our test and
production machines.

- Now there's more. If someone joins our team, they don't have to spend half a
day or so setting up a new machine to run our application. They don't have to install and configure
all these dependencies. They simply tell docker to bring up our application and docker itself will
automatically download and run these dependencies inside an isolated environment called a container.

- And this is the beauty of docker. This isolated environment allows multiple applications
use different versions of some software side by side. So one application may use node version 14,
another application may use node version 9. Both these applications can run side by side on the same
machine without messing with each other. So this is how docker allows us to consistently run an
application on different machines.

- Now there's one more benefit here. When we're done with this application and don't want to work on it anymore,
we can remove the application and all its dependencies in one go. Without docker, as we work on different projects,
our development machine gets cluttered with so many libraries and tools that are used by different applications.

- And then after a while, we don't know if we can remove one or more of these tools because we're always afraid that we would
mess up with some application. With docker, we don't have to worry about this. Because each application
runs with its dependencies inside an isolated environment, we can safely remove an application
with all its dependencies to clean up our machine. Isn't that great?

- So, in a nutshell, docker helps us consistently build, run, and ship our applications.
And that's why a lot of employers are looking for people with docker skills these days.

*** 3- Virtual Machines vs Containers ***
 
- So in the last lesson, we briefly talked about containers. A container is an isolated environment
for running an application.

- Now, one of the questions that often comes up is
how are containers different from virtual machines or VMs?

- Well, a virtual machine as the name implies is an abstraction of a machine or
physical hardware. So we can run several virtual machines on a real physical machine. For example, we can have a Mac
and on this Mac we can run two virtual machines. One running Windows
the other running Linux. How do we do that? Using a tool called
hypervisor. we know, it's one of those computer science names. In simple terms
a hypervisor is software we use to create and manage virtual
machines. There are many hypervisors available out there like VirtualBox
and VMware which are cross-platform so they can run on Windows
Mac OS and Linux. And Hyper-V which is only for Windows.
So with a hypervisor, we can manage virtual machines.

- Now, what is the benefit of building virtual machines?
Well, for us software developers, we can run an application
in isolation inside a virtual machine. So on the same
physical machine, we can have two different virtual machines,
each running a completely different application and each
application has the exact dependencies it needs. So application one
may use node version 14 and MongoDB version 4 while application two
may use node version 9 and MongoDB version 3. All these are running
on the same machine but in different isolated environments. That's one
of the benefits of virtual machines. 

- But there are a number of problems with this model. Each virtual machine needs a full copy of an operating
system that needs to be licensed, patched, and monitored. And that's why
these virtual machines are slow to start because the entire operating system
has to be loaded just like starting our computer. 

- Another problem is that these virtual machines are resource intensive because each virtual
machine takes a slice of the actual physical hardware resources
like CPU, memory, and disk space. So if we have 8 gigabytes of memory,
that memory has to be divided between different virtual machines. Of course,
we can decide how much memory to allocate to each virtual machine. But at the end
of the day, we have a limit in terms of the number of VMs we can run
on a machine. Usually a handful, otherwise we're going to run out
of hardware resources.

- Now let's talk about containers. Containers give us the same kind of isolation. So we can run multiple
applications in isolation, but they're more lightweight. They don't
need a full operating system. In fact, all containers on a single
machine share the operating system of the host. So that means
we need to license, patch, and monitor a single operating system.
Also, because the operating system has already started on the host,
a container can start up pretty quickly. Usually in a second.
Sometimes less. And also, these containers don't need a slice of the hardware resources on the host.
So we don't need to give them a specific number of CPU cores or a slice of memory or disk space. So on a single host,
we can run tens or even hundreds of containers side by side. So these are the differences between
containers and virtual machines.

*** 4- Docker Architecture ***
Let's talk about the architecture of docker so we understand how it works.
Docker uses a client server architecture, so it has a client component
that talks to a server component using a restful API.

- The server, also called the docker engine, sits on the background
and takes care of building and running docker containers. Now technically
a container is just a process, like other processes running on our computer.
But it's a special kind of process which we're going to talk about soon.


- Now as we told we, unlike virtual machines, containers don't contain
a full blown operating system. Instead, all containers on a host share the operating system of the host. 
Now more accurately all those containers share the kernel of the host. What's a kernel?

- A kernel is the core of an operating system. It's like the engine
of a car. It's the part that manages all applications as well as hardware
resources like memory and CPU. Every operating system has its own kernel or engine and these kernels
have different APIs. That's why we cannot run a windows application
on linux because under the hood this application needs to talk to the kernel of the underlying operating system.

- So, that means, on a linux machine
we can only run linux containers because these containers need linux.

- On a windows machine however, we can run both windows and linux containers
because windows 10 is now shipped with a custom built linux kernel.
This is in addition to the windows kernel that's always been in windows. It's not a replacement.
So, with this linux kernel, now we can run linux applications natively on windows.
So, on windows, we can run both linux and windows containers.
Our windows containers share the windows kernel and our linux containers share the
linux kernel.

- Now, what about macOS? Well, macOS
has its own kernel which is different from linux and windows kernels
and this kernel does not have native
support for containerized applications. So, docker on
mac uses a lightweight linux virtual machine to run
linux containers.

*** 5- Installing Docker ***

-------------------code----------------------
https://docs.docker.com/engine/install/
-------------------code----------------------

*** 6- Development Workflow ***

- Now let's talk about our development workflow when using docker.
So to start off, we take an application, it doesn't matter what kind of application it is
or how it's built, we take that application and dockerize it.

- Which means we make a small change so that it can be run by docker.
How? We just add a docker file to it. A docker file is a plain text file that includes instructions that docker uses to package
of this application into an image. 

- This image contains everything our application needs to run. Everything. Typically, a cut down
operating system, a runtime environment like node or python, it also contains application files,
third party libraries, environment variables and so on. 

- So we create a docker file and give it to docker for packaging our application into an image.
Once we have an image, we tell docker to start a container using that image.

- So a container, as we told we, it's just a process. But it's a special kind of process because
it has its own file system which is provided by the image.

- So our application gets loaded inside a container or a process and this is how
we run our application locally on our development machine.

- So instead of directly launching the application and running it inside a typical process,
we tell docker to run it inside a container, an isolated environment.
Now here's the beauty of docker. Once we have this image, we can push it
to a docker registry like docker hub. Docker hub to docker is like
github to git. It's a storage for docker images that anyone can use.
So once our application image is on docker hub, then we can put it on any
machines running docker.

- This machine has the same image we have on our
development machine which contains a specific version of our application
with everything it needs. So we can start our application the same way we
started it on our development machine.

- We just tell docker to start a container using this image. 
So with docker, we no longer need to maintain long complex release documents that have to be precisely followed. All the
instructions for building an image of an application are written in a docker
file. With that, we can package up our application into an image and run it
virtually anywhere. This is the beauty of docker. 


*** 7- Docker in Action ***
- In this lesson we're going to walk through a typical development workflow.
Now don't try to memorize anything in this lesson because we just want we to see the big picture.

- So everything we show we in this lesson, we're going to cover in depth later in the course.
So here in this terminal window, we're currently on my desktop, we're going to create a new directory called hello docker
then go inside this directory and open it in visual studio code.

- So we're going to use VS code as my editor, but we can use any editor that we prefer.
Okay, now in this directory, we're going to add a new file called app.js. We're going to write one line of
javascript code, we don't have to be a javascript developer, we don't even need to learn javascript.
-------------------code----------------------
console.log("Hello World");
-------------------code----------------------

- So with this we're going to print a message on the terminal.
Let's say this is an application and we want to dockerize this application. So
we want to build, run, and ship it using docker. 

- So typically without docker, if we want to ship this application
or more accurately this program to a different computer, on that
computer we need to install node and then we can go to the terminal and type
node app.js so we get the output. So here are the instructions for deploying this program.
We need to start with an operating system then we need to install node which is an execution environment for javascript code
next we need to copy our application files and finally we need to run node app.js
So we have to follow four steps just for a simple program.

- What if we were working with a really complex application?
You would end up with a complex release document that had to be
precisely followed. Now this is where docker comes to the rescue.
We can write these instructions inside a docker file and let
docker package up our application.

- So back to vscode we're going to add another file
to this project called
docker file. So capital D and all the other letters are lowercase
and this file doesn't have any extensions.
Okay? Now vscode is asking if we want to install
the recommended extensions for docker we can go ahead with that.
-------------------code----------------------
Dockerfile
-------------------code----------------------

- Good. So back to this docker file
here we write instructions for packaging
our application. So typically
we start from a base image. This base image has a bunch of files
we're going to take those files and add additional files to it. This is
kind of like inheritance in programming.
Okay? So what is the base image? Well, we can start from a
Linux image and then install node on top of it or
we can start from a node image. This image is already built on
top of Linux. Now how do we know these names? Well, these images
are officially published on docker hub. So if we go to
-------------------code----------------------
hub.docker.com
-------------------code----------------------

- and search for node, we can see the official node image here. So
docker hub is a registry for docker images. Now back to our
docker file. So we start from a node image. Now if we look at docker
hub, we will see that there are multiple
node images. These node images are built on top of different
distributions of Linux. So Linux has different distributions or different
flavors used for different purposes. Now here we can specify a
tag using a colon to specify which Linux distribution we want to use. For this demo, we're
going to use Alpine, which is a very
small Linux distribution.

- So the size of the image that we're going to
download and build on top of is going to be very small. Okay?
So we start from that image. Then we need to copy our application or
program files. For that we use the
copy instruction or copy command. We're going to copy all the files
in the current directory and we're going to
into the app directory into that image.

- So that image has a file system and in that file system
we're going to create a directory called
app. Okay? Now finally
we're going to use the command instruction to execute a
command. What command should we execute here?
Node app.js. But this file i s inside the app directory
so we have to prefix it with the directory name.
-------------------code----------------------
FROM node:alpine
COPY . /app
CMD ["node", "app.js"]
-------------------code----------------------


- Alternatively, here we could set
the current working directory workdir to
slash app and then we don't need to prefix this with the
directory name. So when we use this instruction, all the following instructions
assume that we're currently inside the app directory. 

Okay? So, these instructions
clearly document our deployment process.
-------------------code----------------------
FROM node:alpine
COPY . /app
WORKDIR /app
CMD ["node", "app.js"]
-------------------code----------------------

- Now we go to the terminal and tell docker to package up our application.
So, we say docker build, we need to give our image a
tag, a tag to identify it. So, dash t,
here we specify a name like hello docker, and then we need to
specify where docker can find a docker file. So we're currently
inside hello docker directory and our docker file is right here
so we use a period to reference the current directory.
-------------------code----------------------
docker build -t hello-docker .
-------------------code----------------------

- we got error message, so we need to run the docker desktop application
-------------------code----------------------
.docker/run/docker.sock. Is the docker daemon running?
-------------------code----------------------

- now we rerun again 
-------------------code----------------------
docker build -t hello-docker .
[+] Building 0.9s (8/8) FINISHED                                                                                                   docker:desktop-linux
 => [internal] load build definition from Dockerfile                                                                                               0.0s
 => => transferring dockerfile: 105B                                                                                                               0.0s
 => [internal] load metadata for docker.io/library/node:alpine                                                                                     0.8s
 => [internal] load .dockerignore                                                                                                                  0.0s
 => => transferring context: 2B                                                                                                                    0.0s
 => [internal] load build context                                                                                                                  0.0s
 => => transferring context: 130B                                                                                                                  0.0s
 => CACHED [1/3] FROM docker.io/library/node:alpine@sha256:6eae672406a2bc8ed93eab6f9f76a02eb247e06ba82b2f5032c0a4ae07e825ba                        0.0s
 => [2/3] COPY . /app                                                                                                                              0.0s
 => [3/3] WORKDIR /app                                                                                                                             0.0s
 => exporting to image                                                                                                                             0.0s
 => => exporting layers                                                                                                                            0.0s
 => => writing image sha256:817ba4c523a5f02b3f85d33324a901e432cf33219df45953bc906e87cedf41bd                                                       0.0s
 => => naming to docker.io/library/hello-docker
-------------------code----------------------

- Let's go with that. Now, we might be expecting an image
file inside the current directory. But back in VS code, look,
there is nothing in the file root. Because the image is not stored here. And in fact,
an image is not a single file. How docker stores this image is very complex
and we don't have to worry about it.

- So, back to the terminal, to see all the images on this computer, we type
-------------------code----------------------
docker images
REPOSITORY     TAG       IMAGE ID       CREATED         SIZE
hello-docker   latest    817ba4c523a5   2 minutes ago   160MB
-------------------code----------------------


- or which is short for list.
-------------------code----------------------
docker image ls
REPOSITORY     TAG       IMAGE ID       CREATED         SIZE
hello-docker   latest    817ba4c523a5   3 minutes ago   160MB
-------------------code----------------------

- So, take a look. On this machine we have a
repository called hello docker in this repository we have an image
with this tag, latest. So docker added this by default.

- We'll talk about this later in the course. But basically
we use these tags for versioning our images. So each image can
contain a different version of our application.

- now each image also has a unique identifier. Here we can see
when the image was created and the size of this image. So because we
used node from Linux Alpine we ended up with
160 megabytes of data in this image.

- So this image contains Alpine Linux, node
and our application files. And the total size is 160 megabytes.
Now if we used a different node image that was based on a different
distribution of Linux, we would end
up with a larger image. And then when deploying that image, we would have to transfer
that image from one computer to another.

- So that's why we used node Alpine
because this is a very small image. Okay?
So we have built this image, now we can run this image on any computer
running docker.

- So on this machine
which is my development machine, we can say
docker run and then type the image name, "hello
docker", and it doesn't matter which directory we're in, because this image contains
all the files for running our application.

we see the message on the terminal.
-------------------code----------------------
docker run hello-docker
Hello World
-------------------code----------------------
Now, look,

- Now, we can go ahead and publish
this image to docker-hup, so anyone can use this image. Then we can go on
another machine like a test or a production machine and pull and run
this image. 

- Now we can take this image and run it on any
computers. 

- or we can publish it on docker hub then paly without it using 
play with docker
-------------------code----------------------
https://www.docker.com/play-with-docker/
-------------------code----------------------
