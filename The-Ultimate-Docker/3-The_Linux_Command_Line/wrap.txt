*** 1- Introduction ***
All right, the next stop in our journey is the Linux command line.

- But why Linux? What if we're a Windows user?
Well, we still need to know a bit of Linux for a number of reasons.
For starters, Docker has its foundations built on top of basic Linux concepts.
So if we want to be productive and troubleshoot issues easily,
we need to know some of the basic Linux commands.

- Also, most tutorials online are based on Linux commands.
So if we don't understand these basic commands, we're not going to get far.
learning Linux is like learning English.
so everybody should know some English these days.
You don't need to speak it or write a book in it, but we need to understand it.
So unless we're a power Linux user, do not skip this section.
It's going to be super easy and extremely useful.
So let's jump in and get started.

*** 2- Linux Distributions ***

- Let's start off this section by talking about Linux distributions, 
also called Linux distros.

- So, as we probably know, Linux is open source software.
And for this reason, many individuals and communities
have created their own version of Linux called Linux distributions.

- Each of these distributions is made to fit specialized needs
like running servers, desktop computers, mobile phones and so on.

- So we have Ubuntu, which is one of the most popular Linux distributions.
We also have Debian, Alpine, which we briefly talked about, it's a very small Linux distribution.

- We also have Fedora, CentOS and so on.

- Believe it or not, there are more than a thousand Linux distributions out there.

- Now, most of these distributions support pretty much the same set of commands,
but sometimes we might discover differences along the way. So be aware of that.

- In this section, we're going to use Ubuntu Linux because it's one of the most popular distributions.
But if we have a preference for another distribution, that's totally fine.

*** 3- Running Linux ***
Alright, let's see how we can run Ubuntu on this machine.

- So, we go to hub.docker.com 
-------------------code----------------------
https://hub.docker.com/
-------------------code----------------------


- and search for Ubuntu. Over here we can see the official Ubuntu image
that's been downloaded more than 10 million times. 


- Let's have a quick look here.
So, for each image, we can see the command to pull
that image onto our machine.
-------------------code----------------------
$ docker pull ubuntu
-------------------code----------------------

- Now in this lesson, we're not going to use the pull command,
we're going to show we a shortcut. So, here in the terminal, instead of
running docker pull Ubuntu, we're going to run docker run Ubuntu.
-------------------code----------------------
$ docker run ubuntu
-------------------code----------------------

- Now, if we have this image
locally, docker is going to store the container with this image, otherwise
it's going to pull this image behind the scene and then store the container. 

- see, docker is unable to find this image locally, and now it's pulling it from docker hop.
-------------------code----------------------
$ docker run ubuntu
Unable to find image 'ubuntu:latest' locally
latest: Pulling from library/ubuntu
5b17151e9710: Pull complete
Digest: sha256:72297848456d5d37d1262630108ab308d3e9ec7ed1c3286a32fe09856619a782
Status: Downloaded newer image for ubuntu:latest
-------------------code----------------------

- Now, what happened? Well, docker started a container,
but because we didn't interact with this container, the container stopped.

- to prove this. So, if we run docker ps, we can see the list of running processes
or running containers. Look, we don't have any containers running here.
-------------------code----------------------
$ docker ps
CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES
-------------------code----------------------

- but if we type docker ps dash a for all, we can see the stopped containers
as well. So we have two stopped containers. The first one is
using the Ubuntu image, this is the one that we just started.
And the second one is hello docker, which we started
earlier in the course.
-------------------code----------------------
$ docker ps -a
CONTAINER ID   IMAGE          COMMAND                   CREATED              STATUS                          PORTS     NAMES
cc3ce42ddbf2   ubuntu         "/bin/bash"               About a minute ago   Exited (0) About a minute ago             fervent_golick
8ee68b73826f   hello-docker   "docker-entrypoint.sâ€¦"   2 hours ago          Exited (0) 2 hours ago                    busy_brown
-------------------code----------------------

- So, to start a container and interact with it, we have to type docker run dash
it, that is short for interactive. We're going to start a container
in the interactive mode. And in this container
we're going to load the Ubuntu image which we have locally.
-------------------code----------------------
$ docker run -it ubuntu
root@ee871cc6ca5f:/#
-------------------code----------------------

- Now, what we have here is called
the shell. A shell is a program that takes our commands
and passes them to the operating system for execution.
Now, what we have here is called the shell prompt.

- the first part root represents the currently logged in user,
so by default we're logged in as the root user which has the highest privileges.
Then after the add sign, we have the name of the machine. So, this container has this
ID which is automatically generated by docker and in this case, it's like the name of a machine.
Okay? Then after the colon, we can see forward slash, that represents where we are in the file system.
A forward slash represents the root directory. That is the highest directory in the file system.
Then we have a pound "#" and this means we have the highest privileges because we've logged in as the root user.
If we logged in as a normal user, instead of a pound we would see a dollar sign "$".
-------------------code----------------------
root@ee871cc6ca5f:/#
-------------------code----------------------

- So, in this shell, we can execute a bunch of commands
for example, we can say echo, hello and this prints hello on the terminal.
-------------------code----------------------
root@ee871cc6ca5f:/# echo hello
hello
-------------------code----------------------

We can also say "whoami", This shows the current user.
-------------------code----------------------
root@ee871cc6ca5f:/# whoami
root
-------------------code----------------------

- So these commands that we're running here, this shell program that we told we about
takes these commands and passes them to the kernel for execution.
If we type echo dollar sign zero, we can see the location of this shell program.
Take a look. So, that is forward slash bin slash bash.
-------------------code----------------------
root@ee871cc6ca5f:/# echo $0
/bin/bash
-------------------code----------------------

- So bin is a folder or a directory and inside this directory, we have a program called bash
which is short for born again shell.
So apparently, Steve Bourne is the first person
who created a shell program. Bash or born again shell
is a reference to Steve Bourne.

- So bash is an enhanced version of the original shell program.
Now one thing we probably notice is that in Linux
we use a forward slash to separate files and directories.
But in Windows, we use a backslash.

- So that's one of the first differences.
The other difference is that Linux is a case sensitive operating system.
So if we type echo with a capital E,
it's not going to work.

- Bash tells us echo command not found.
So lowercase and uppercase letters are different.
And this is not limited to commands, it's applicable everywhere.
-------------------code----------------------
Echo $0
bash: Echo: command not found
-------------------code----------------------

- If we want to reference a file or a directory or a user,
pretty much anything, we should always spell it properly
with the right uppercase and lowercase letters.


- Using the up and down arrows,
we can go through the commands we have executed so far.
So this is a pretty useful shortcut we need to know
because we don't want to type these commands manually all the time.


- Also, using the history command,
we can see all the commands we have executed lately.
-------------------code----------------------
root@ee871cc6ca5f:/# history
    1  echo hello
    2  whoami
    3  echo $0
    4  Echo $0
    5  history
-------------------code----------------------


- So, take a look.
So earlier we used whoami,
we also used echo and so on.
Now we can replay any of these commands
by typing an exclamation mark,
followed by the command number.
So if we type 2,
this is exactly like running whoami.
-------------------code----------------------
root@ee871cc6ca5f:/# history
    1  echo hello
    2  whoami
    3  echo $0
    4  Echo $0
    5  history
root@ee871cc6ca5f:/# !2
whoami
root
-------------------code----------------------
