###Containers

- Running containers
docker run <image>                   
docker run -d <image>                # run in the background
docker run —name <name> <image>      # to give a custom name
docker run —p 3000:3000 <image>      # to publish a port HOST:CONTAINER



- Listing containers
docker ps                           # to list running containers
docker ps -a                        # to list all containers





- Viewing the logs
docker logs <containerID> 
docker logs -f <containerID>         # to follow the log
docker logs —t <containerID>         # to add timestamps
docker logs —n 10 <containerID>      # to view the last 10 lines



- Executing commands in running containers   (exec: run on running container,  run: run on new container)
docker exec <containerID> <cmd>
docker exec -it <containerID> sh      # to start a shell


- Starting and stopping containers (start: start a stopped container, run: start a new container)
docker stop <containerID>
docker start <containerID>



- Removing containers
docker container rm <containerID>
docker rm <containerID>
docker rm -f <containerID>         # to force the removals
docker container prune             # to remove all stopped containers


- Volumes: {is a storage out of container it can be dirctly on the host or cloud}
docker volume ls
docker volume create app-data
docker volume inspect app-data
docker run -v app-data:/app/data <image>




- Copying files between the host and containers
docker cp <containerID>:/app/log.txt .
docker cp secret.txt <containerID>:/app




- Sharing source code with containers
docker run -v $(pwd):/app <image>



#Memo:
never store files inside a container coz when the container gone all the it file system goes with it
in this case we should volumes and we can even share volumes with other container

