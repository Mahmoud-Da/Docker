*** 1- Introduction ***

- our journey to master Docker begins here. In every section, we're going to discover
something new about Docker. In this section,
- we're going to talk about what Docker is and
why it's so popular. 

- Then we're going to talk about virtual machines and containers.

- Next, we're going to talk about the architecture of Docker so we understand how it works.

- Then we're going to install Docker and get our hands dirty.

- we're going to give we an overview of wer development workflow with Docker.

- And then we're going to see that in action using a really simple example. 

So by the end of this section, we will have an idea of what Docker is all about.



*** 2- What is Docker ***

- So what is docker and why is everyone using it these days? Well,
docker is a platform for building, running, and shipping applications in a consistent manner.

- so if our application works on our development machine, it can run and function the same way on other machines.

- If we have been developing software for a while, we've probably come across this situation where
our application works on our development machine, but doesn't somewhere else. Can we think of
three reasons why this happens? Well, this can happen if one or more files are not included as
part of our deployment. So our application is not completely deployed, it's missing something.
This can also happen if the target machine is running a different version of some software
that our application needs. Let's say our application needs node version 14, but the
target machine is running node version 9. This can also happen if the configuration settings,
like environment variables, are different across these machines.


- And this is where docker comes to the rescue. With docker, we can easily package up our
application with everything it needs and run it anywhere on any machine with docker. So if our
application needs a given version of node and mongodb, all of these will be included in our
application's package. Now we can take this package and run it on any machine that runs docker.
So if it works on our development machine, it's definitely going to work on our test and
production machines.

- Now there's more. If someone joins our team, they don't have to spend half a
day or so setting up a new machine to run our application. They don't have to install and configure
all these dependencies. They simply tell docker to bring up our application and docker itself will
automatically download and run these dependencies inside an isolated environment called a container.

- And this is the beauty of docker. This isolated environment allows multiple applications
use different versions of some software side by side. So one application may use node version 14,
another application may use node version 9. Both these applications can run side by side on the same
machine without messing with each other. So this is how docker allows us to consistently run an
application on different machines.

- Now there's one more benefit here. When we're done with this application and don't want to work on it anymore,
we can remove the application and all its dependencies in one go. Without docker, as we work on different projects,
our development machine gets cluttered with so many libraries and tools that are used by different applications.

- And then after a while, we don't know if we can remove one or more of these tools because we're always afraid that we would
mess up with some application. With docker, we don't have to worry about this. Because each application
runs with its dependencies inside an isolated environment, we can safely remove an application
with all its dependencies to clean up our machine. Isn't that great?

- So, in a nutshell, docker helps us consistently build, run, and ship our applications.
And that's why a lot of employers are looking for people with docker skills these days.

*** 3- Virtual Machines vs Containers ***
 
- So in the last lesson, we briefly talked about containers. A container is an isolated environment
for running an application.

- Now, one of the questions that often comes up is
how are containers different from virtual machines or VMs?

- Well, a virtual machine as the name implies is an abstraction of a machine or
physical hardware. So we can run several virtual machines on a real physical machine. For example, we can have a Mac
and on this Mac we can run two virtual machines. One running Windows
the other running Linux. How do we do that? Using a tool called
hypervisor. we know, it's one of those computer science names. In simple terms
a hypervisor is software we use to create and manage virtual
machines. There are many hypervisors available out there like VirtualBox
and VMware which are cross-platform so they can run on Windows
Mac OS and Linux. And Hyper-V which is only for Windows.
So with a hypervisor, we can manage virtual machines.

- Now, what is the benefit of building virtual machines?
Well, for us software developers, we can run an application
in isolation inside a virtual machine. So on the same
physical machine, we can have two different virtual machines,
each running a completely different application and each
application has the exact dependencies it needs. So application one
may use node version 14 and MongoDB version 4 while application two
may use node version 9 and MongoDB version 3. All these are running
on the same machine but in different isolated environments. That's one
of the benefits of virtual machines. 

- But there are a number of problems with this model. Each virtual machine needs a full copy of an operating
system that needs to be licensed, patched, and monitored. And that's why
these virtual machines are slow to start because the entire operating system
has to be loaded just like starting our computer. 

- Another problem is that these virtual machines are resource intensive because each virtual
machine takes a slice of the actual physical hardware resources
like CPU, memory, and disk space. So if we have 8 gigabytes of memory,
that memory has to be divided between different virtual machines. Of course,
we can decide how much memory to allocate to each virtual machine. But at the end
of the day, we have a limit in terms of the number of VMs we can run
on a machine. Usually a handful, otherwise we're going to run out
of hardware resources.

- Now let's talk about containers. Containers give us the same kind of isolation. So we can run multiple
applications in isolation, but they're more lightweight. They don't
need a full operating system. In fact, all containers on a single
machine share the operating system of the host. So that means
we need to license, patch, and monitor a single operating system.
Also, because the operating system has already started on the host,
a container can start up pretty quickly. Usually in a second.
Sometimes less. And also, these containers don't need a slice of the hardware resources on the host.
So we don't need to give them a specific number of CPU cores or a slice of memory or disk space. So on a single host,
we can run tens or even hundreds of containers side by side. So these are the differences between
containers and virtual machines.

